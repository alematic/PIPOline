1. import database of clean RS (clean means longer than 5 and palindoroms, containing only ATGC)
2. import n (X>2n), alpha params, and gene +- 1000 string

3. starting from the desired end of the gene and direction, excluding the first n basepairs (bp) 
    find first clean cut site (CS), meaning same code as one of RS (separate function)
4. Merge X (n+len(RS)+CS offset, without STOP codon) with linker, FPG, alphaX 
5. Check for uniqueness of CS from 3. in sequence from 4.
6. If not 5. repeat 3. starting from the last CS
7. Search for the most outer CS from MCS that are not in 4. 
    (two independent searches, one from left, one from right. Maybe function from 3. can be used)
    7a. If impossible to find, exit
8. Assemble the final plasmid without MCS part that is replaced with sequence from 4.
    8a. Load one backbone and two idices for MCS 
9. Check for uniqueness of CS from 3. in sequence the final plasmid
10. If not 9. repeat 3. starting from the last CS
11. If valid CS, return X, alphaX and assembled plasmid, and CS and MCS cut sites

12. Find restriction enzymes from rsite database (1.) that do not cut the assembled plasmid



X. Do upper steps for [5`,3`,deletion]




Regular fasta file contains one line header with description of the sequence and that starts with '>', followed by a sequence (that might contain '\n' chars)

Input (given as a separate fasta files in the command line, or maybe retrieved from the folder if we used the standardized file naming, whatever you think is smarter):

1. Plasmid backbone (pETUL): '*_backbone.fsa'
2. Starting and ending index of MCS in the plasmid backbone (nucleotides counted from 1)
3. min_homology: minimal homology in bp that should be included around the cutsite for integration into the yeast genome
4. max_homology: maximal length in bp of the part used for the integration into the yeast genome (this is used as a stopping criteria to search for cutsite, should be < 1000 bp).
4. alpha: relative length of the homology part used for integration and homology part used for pop-out
5. Gene to be tagged or deleted, including 1000 bp upstream of starting codon and 1000 bp downstream of stop: '*_gene.fsa'
6. Linker sequence: '*_linker.fsa'
7. A parameter that described the choice between deleting the gene (0), tagging at the 5' end (5) or tagging at the 3' end (3)
8. In case of tagging, coding sequences of FPG (including the stop codon) should be given as a separate files ending with: '*_FPG' (or maybe a single file with fasta, whatever is easier)
9. A list of commercially available enzymes and their cutsites 

Output (printed as a single file with coding sequences in fasta format and I guess can be also printed inside the command line):

1. Assembled plasmid for deletion or labeling (depending on the input choice of 7)
2. Cutsite used for integration and cutsies used for cutting the MCS
3. Cutsites that can be added to the plasmid (do not include these within a plasmid but print them as an enzyme, cutsite list)

4. In case there are multiple FPGs that should be used do 1-3 for all and print them as separate files
4a. In case there is no appropriate cutsite in the [min_homology, max_homology] region then use the cutsite that allows tagging of biggest subset of FPGs (if there are several such cutsites print the one that requires least amount of DNA)
4b. Find if recoding of all FPGs that cannot be used for tagging is possible for any cutsite in the [min_homology, max_homology] (there has to be a loop anyways for 4a, we can just store the details of it)


test examples:
CLB5: ymNeonGreen, ymTq2, mCherry at the 3' end
HTB2: mCherry, sfGFP at the 3'end
CLB2: ymNeonGreen, ymTq2, mCherry at the 3' end
GAL4: deletion

other_parameters and solutions are shown in the readme file in the respective folders


BROTO
1. Msm da treba da dodamo samo warninge u slucaju da je alpha*X vece od 1000 i slicno
2. Jedna stvar na koju neces mozda odmah da obratis paznju: kada budes dodavao labelovanje fluorescentnim genom na levom kraju, onda treba da se skine stop kodon sa FPG
3. Za solutione nisam izdvojio sve sekvence posebno koje treba da outputuje program, samo sam napravio plazmide. Ali ako otvoris plazmide u SnapGene Vieweru (djabe je) onda su tu anotirani svi delovi (X, FPG, linker, alpha*X)

General remark: We do not check whether the cutsites used from MCS are going to stay available after cloning

Question for S:
In case of labeling, if we don't have good cutsites within the gene, should we search for cutsites in the 3' UTR. The dissadvantage of this is that we won't have the fluorescence immediatelly after the transformation but we would have to wait for the pop-out. But for CLB5 there seems to be no cut-sites?